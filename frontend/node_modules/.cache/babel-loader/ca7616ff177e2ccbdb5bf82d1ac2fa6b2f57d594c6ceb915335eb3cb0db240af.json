{"ast":null,"code":"var _jsxFileName = \"/Users/mellyeliu/boygame/frontend/src/Components/TraitStack.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from \"react\";\nimport TraitCard from \"./Trait\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getRandomNumber = (min, max) => Math.random() * (max - min) + min;\nconst TraitStack = ({\n  traits\n}) => {\n  _s();\n  const stackRef = useRef(null); // Ref for the container\n  const [cardHeight, setCardHeight] = useState(0); // State to store the actual card height\n\n  useEffect(() => {\n    // Measure card height after render\n    const measureHeight = () => {\n      if (stackRef.current) {\n        const firstCard = stackRef.current.querySelector(\".trait-card\");\n        if (firstCard) {\n          setCardHeight(firstCard.offsetHeight); // Use offsetHeight for consistent measurement\n        }\n      }\n    };\n    measureHeight(); // Measure height on mount\n\n    // Add a slight delay to handle asynchronous rendering\n    const resizeObserver = new ResizeObserver(() => {\n      measureHeight();\n    });\n    if (stackRef.current) {\n      resizeObserver.observe(stackRef.current);\n    }\n    return () => resizeObserver.disconnect();\n  }, []);\n  const styles = {\n    traitStack: {\n      position: \"relative\",\n      width: \"100%\",\n      height: `${cardHeight * traits.length}px` // Dynamic height for the stack\n    },\n    cardPosition: index => ({\n      position: \"absolute\",\n      top: `${index * (cardHeight - 20)}px`,\n      // Calculate top based on measured card height\n      left: `${getRandomNumber(-50, 50)}px`,\n      // Randomized horizontal offset\n      transform: `rotate(${getRandomNumber(-5, 5)}deg)`,\n      // Randomized rotation\n      width: \"100%\"\n    })\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: stackRef,\n    style: styles.traitStack,\n    children: traits.map((trait, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.cardPosition(index),\n      className: \"trait-card\",\n      children: /*#__PURE__*/_jsxDEV(TraitCard, {\n        text: trait.text,\n        type: trait.type\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(TraitStack, \"9Oe5YO0Bon7v6axfck+dyts3oHQ=\");\n_c = TraitStack;\nexport default TraitStack;\nvar _c;\n$RefreshReg$(_c, \"TraitStack\");","map":{"version":3,"names":["React","useRef","useState","useEffect","TraitCard","jsxDEV","_jsxDEV","getRandomNumber","min","max","Math","random","TraitStack","traits","_s","stackRef","cardHeight","setCardHeight","measureHeight","current","firstCard","querySelector","offsetHeight","resizeObserver","ResizeObserver","observe","disconnect","styles","traitStack","position","width","height","length","cardPosition","index","top","left","transform","ref","style","children","map","trait","className","text","type","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mellyeliu/boygame/frontend/src/Components/TraitStack.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport TraitCard from \"./Trait\";\n\nconst getRandomNumber = (min, max) => Math.random() * (max - min) + min;\n\nconst TraitStack = ({ traits }) => {\n  const stackRef = useRef(null); // Ref for the container\n  const [cardHeight, setCardHeight] = useState(0); // State to store the actual card height\n\n  useEffect(() => {\n    // Measure card height after render\n    const measureHeight = () => {\n      if (stackRef.current) {\n        const firstCard = stackRef.current.querySelector(\".trait-card\");\n        if (firstCard) {\n          setCardHeight(firstCard.offsetHeight); // Use offsetHeight for consistent measurement\n        }\n      }\n    };\n\n    measureHeight(); // Measure height on mount\n\n    // Add a slight delay to handle asynchronous rendering\n    const resizeObserver = new ResizeObserver(() => {\n      measureHeight();\n    });\n    if (stackRef.current) {\n      resizeObserver.observe(stackRef.current);\n    }\n    return () => resizeObserver.disconnect();\n  }, []);\n\n  const styles = {\n    traitStack: {\n      position: \"relative\",\n      width: \"100%\",\n      height: `${cardHeight * traits.length}px`, // Dynamic height for the stack\n    },\n    cardPosition: (index) => ({\n      position: \"absolute\",\n      top: `${index * (cardHeight - 20)}px`, // Calculate top based on measured card height\n      left: `${getRandomNumber(-50, 50)}px`, // Randomized horizontal offset\n      transform: `rotate(${getRandomNumber(-5, 5)}deg)`, // Randomized rotation\n      width: \"100%\",\n    }),\n  };\n\n  return (\n    <div ref={stackRef} style={styles.traitStack}>\n      {traits.map((trait, index) => (\n        <div\n          key={index}\n          style={styles.cardPosition(index)}\n          className=\"trait-card\"\n        >\n          <TraitCard text={trait.text} type={trait.type} />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default TraitStack;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}